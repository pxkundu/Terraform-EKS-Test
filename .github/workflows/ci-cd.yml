name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  lint-and-test:
    name: Lint & Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint --if-present

      - name: Unit Tests
        run: npm run test --if-present

      - name: Build
        run: npm run build --if-present

  build-and-push-docker:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Terraform-EKS-Test/docker/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: build-and-push-docker
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: ${{ steps.cdk-deploy.outputs.cdk_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_GITHUB_ROLE_ARN }}
          role-session-name: github-actions-cicd

      - name: Install CDK dependencies
        run: |
          npm install -g aws-cdk
          cd Terraform-EKS-Test/apps/pt-notification-service-infra-cdk
          npm ci

      - name: CDK Synth
        run: |
          cd Terraform-EKS-Test/apps/pt-notification-service-infra-cdk
          cdk synth

      - name: CDK Deploy
        id: cdk-deploy
        run: |
          cd Terraform-EKS-Test/apps/pt-notification-service-infra-cdk
          cdk deploy --require-approval never

# Notes:
# - This workflow assumes AWS credentials and ECR info are stored as GitHub secrets.
# - The Docker build context and Dockerfile path may need adjustment based on your repo structure.
# - Add additional jobs for staging/dev environments as needed.
# - For PRs, only lint/test/build jobs run; deploy and Docker push only on main branch. 